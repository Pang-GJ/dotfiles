"" Source your .vimrc
"source ~/.vimrc

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
" set scrolloff=5

" Don't use Ex mode, use Q for formatting.
" map Q gq

inoremap jj <Esc>

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t

"" Map <leader>d to start debug
" map <leader>d <Action>(Debug)

" quit
" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" noremap gr <Action>(FindUsages)

" Find more examples here: https://jb.gg/share-ideavimrc

" ================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
" Plug 'easymotion/vim-easymotion'

" set easymotion

" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set ignorecase
set scrolloff=30
set history=200

set number
set relativenumber

set incsearch
set hlsearch
" set keep-english-in-normal
" 中英文自动切换，开启美式键盘
set keep-english-in-normal
set keep-english-in-normal-and-restore-in-insert

" ================================================================================================
" = No Leader Keymaps =====================================
" ================================================================================================
" nmap gt <action>(GotoTest)
" nmap gm <action>(MethodUp)
" last changed in current buffer(file)
" nmap ga '.

" paste之后不会把yank的内容替换掉
vmap p "_dp

" bookmark in whole program
" nmap ma mA
" nmap 'a 'A
" nmap ms mS
" nmap 's 'S
" nmap md mD
" nmap 'd 'D
" nmap mf mF
" nmap 'f 'F;

nnoremap ]] :action MethodDown<CR>
nnoremap [[ :action MethodUp<CR>

" Comment
nmap gcc <action>(CommentByLineComment)
vmap gc <action>(CommentByLineComment)

" Something like lsp
nmap gr <action>(FindUsages)
nmap gd <action>(GotoDeclaration)
nmap gi <action>(GotoImplementation)
nmap gn <action>(Generate)
nmap ge <action>(GotoNextError)

" Windows
nmap sv <action>(SplitVertically)
nmap sh <action>(SplitHorizontally)

sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

nnoremap <TAB> :action NextTab<CR>
nnoremap <s-TAB> :action PreviousTab<CR>

" Terminal
nmap <C-\> <action>(ActivateTerminalToolWindow)

nnoremap U <C-R>

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "

" quit
noremap <leader>q :q!<CR>
noremap <leader>w :w!<CR>

" easymotion
nmap <leader><leader>s <Action>(AceAction)
nmap <leader><leader>S <Action>(AceTargetAction)
nmap <leader><leader>j <Action>(AceLineAction)
nmap <leader><leader>F <Action>(AceBackwardAction)
nmap <leader><leader>f <Action>(AceForwardAction)
nmap F <Action>(AceBackwardAction)
nmap f <Action>(AceForwardAction)

" f: Find⭐️
nmap <leader>ff <action>(GotoFile)
nmap <leader>fl <action>(SelectInProjectView)
nmap <leader>ft <action>(FindInPath)
nmap <leader>fs <action>(GotoSymbol)
nmap <leader>fc <action>(GotoClass)
nmap <leader>fa <action>(GotoAction)
nmap <leader>fp <action>(OpenProjectWindows)

" let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
" nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

" g: Git ⭐️
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>
nmap <leader>gc <action>(ActivateCommitToolWindow)

" l: lsp: Language server protocol (align with neovim)⭐️
nmap <leader>lr <action>(RenameElement)
nmap <leader>lf <action>(ReformatCode) \| <action>(OptimizeImports)
nmap <leader>lo <action>(GotoRelated)

" O: Outline
" let g:WhichKeyDesc_Outline = "<leader>O Outline"
nmap <leader>O <action>(ActivateStructureToolWindow)

" T: Trouble
nmap <leader>T <action>(ActivateProblemsViewToolWindow)

" No highlight
nmap <leader>h :nohlsearch<CR>

" show file structure
nmap <leader>ss <action>(FileStructurePopup)
nmap <leader>sb <action>(ShowBookmarks)

" r: Run/Re ⭐️
nmap <leader>rr <action>(Run)
nmap <leader>rc <action>(RunConfiguration)
nmap <leader>rt <action>(RerunTests)

" d: debug
nmap <leader>db <action>(ToggleLineBreakpoint)
nmap <leader>dc <action>(Debugger.RemoveAllBreakpointsInFile)
nmap <leader>dd <action>(Debug)

" z: zip(fold) ⭐️
nmap <leader>zo <action>(ExpandAllRegions)
nmap <leader>zc <action>(CollapseAllRegions)

" c: Close ⭐️;
nmap <leader>c :q!<CR>
nmap <leader>C <action>(CloseAllToTheLeft) \| <action>(CloseAllToTheRight)

" e: Toggle Explorer ⭐️
nmap <leader>e :NERDTree <CR>
" It's better way!!

" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)

" 全屏模式
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>